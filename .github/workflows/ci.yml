name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Check formatting (black)
        run: black --check src tests benchmarks

      - name: Lint (ruff)
        run: ruff check src tests benchmarks

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run mypy
        run: mypy src/merge_segments

  tests:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install project
        run: |
          python -m pip install --upgrade pip
          pip install ".[progress,plotting]" pytest pytest-cov

      - name: Run unit tests
        if: matrix.python-version != '3.11'
        run: pytest --maxfail=1

      - name: Run unit tests with coverage
        if: matrix.python-version == '3.11'
        run: pytest --maxfail=1 --cov=src/merge_segments --cov-report=xml --cov-report=term

      - name: Upload coverage artifact
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-python-${{ matrix.python-version }}
          path: coverage.xml

      - name: Upload to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: unit
          fail_ci_if_error: false

  wheels:
    name: Build & Install Wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build distributions
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build

      - name: Install wheel in isolated environment
        run: |
          python -m venv .venv-dist
          if [ -f .venv-dist/bin/activate ]; then source .venv-dist/bin/activate; else source .venv-dist/Scripts/activate; fi
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          python -c "import importlib.metadata as md; print('merge_segments', md.version('merge-segments'))"
          python -c "from merge_segments import on_slk_intervals_auto; print('auto dispatcher ready')"
